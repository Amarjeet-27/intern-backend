/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ElectionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCandidate"
      | "addVoter"
      | "admin"
      | "authorizeCreator"
      | "authorizedCreators"
      | "createElection"
      | "electionCount"
      | "elections"
      | "endElection"
      | "getCandidates"
      | "getVoters"
      | "getVotes"
      | "getWinner"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CandidateAdded"
      | "ElectionCreated"
      | "VoteCast"
      | "VoterAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addVoter",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authorizeCreator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedCreators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createElection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "electionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "elections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endElection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVoter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "elections", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVoters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace CandidateAddedEvent {
  export type InputTuple = [electionId: BigNumberish, candidate: AddressLike];
  export type OutputTuple = [electionId: bigint, candidate: string];
  export interface OutputObject {
    electionId: bigint;
    candidate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ElectionCreatedEvent {
  export type InputTuple = [
    electionId: BigNumberish,
    name: string,
    creator: AddressLike
  ];
  export type OutputTuple = [electionId: bigint, name: string, creator: string];
  export interface OutputObject {
    electionId: bigint;
    name: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    electionId: BigNumberish,
    voter: AddressLike,
    candidate: AddressLike
  ];
  export type OutputTuple = [
    electionId: bigint,
    voter: string,
    candidate: string
  ];
  export interface OutputObject {
    electionId: bigint;
    voter: string;
    candidate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterAddedEvent {
  export type InputTuple = [electionId: BigNumberish, voter: AddressLike];
  export type OutputTuple = [electionId: bigint, voter: string];
  export interface OutputObject {
    electionId: bigint;
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ElectionManager extends BaseContract {
  connect(runner?: ContractRunner | null): ElectionManager;
  waitForDeployment(): Promise<this>;

  interface: ElectionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCandidate: TypedContractMethod<
    [_electionId: BigNumberish, _candidate: AddressLike],
    [void],
    "nonpayable"
  >;

  addVoter: TypedContractMethod<
    [_electionId: BigNumberish, _voter: AddressLike],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  authorizeCreator: TypedContractMethod<
    [_creator: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedCreators: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  createElection: TypedContractMethod<[_name: string], [bigint], "nonpayable">;

  electionCount: TypedContractMethod<[], [bigint], "view">;

  elections: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean] & {
        name: string;
        creator: string;
        isActive: boolean;
      }
    ],
    "view"
  >;

  endElection: TypedContractMethod<
    [_electionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCandidates: TypedContractMethod<
    [_electionId: BigNumberish],
    [string[]],
    "view"
  >;

  getVoters: TypedContractMethod<
    [_electionId: BigNumberish],
    [string[]],
    "view"
  >;

  getVotes: TypedContractMethod<
    [_electionId: BigNumberish, _candidate: AddressLike],
    [bigint],
    "view"
  >;

  getWinner: TypedContractMethod<[_electionId: BigNumberish], [string], "view">;

  vote: TypedContractMethod<
    [_electionId: BigNumberish, _candidate: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCandidate"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _candidate: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addVoter"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _voter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "authorizeCreator"
  ): TypedContractMethod<[_creator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedCreators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createElection"
  ): TypedContractMethod<[_name: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "electionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "elections"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean] & {
        name: string;
        creator: string;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "endElection"
  ): TypedContractMethod<[_electionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCandidates"
  ): TypedContractMethod<[_electionId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVoters"
  ): TypedContractMethod<[_electionId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _candidate: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWinner"
  ): TypedContractMethod<[_electionId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _candidate: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CandidateAdded"
  ): TypedContractEvent<
    CandidateAddedEvent.InputTuple,
    CandidateAddedEvent.OutputTuple,
    CandidateAddedEvent.OutputObject
  >;
  getEvent(
    key: "ElectionCreated"
  ): TypedContractEvent<
    ElectionCreatedEvent.InputTuple,
    ElectionCreatedEvent.OutputTuple,
    ElectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoterAdded"
  ): TypedContractEvent<
    VoterAddedEvent.InputTuple,
    VoterAddedEvent.OutputTuple,
    VoterAddedEvent.OutputObject
  >;

  filters: {
    "CandidateAdded(uint256,address)": TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;
    CandidateAdded: TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;

    "ElectionCreated(uint256,string,address)": TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;
    ElectionCreated: TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;

    "VoteCast(uint256,address,address)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoterAdded(uint256,address)": TypedContractEvent<
      VoterAddedEvent.InputTuple,
      VoterAddedEvent.OutputTuple,
      VoterAddedEvent.OutputObject
    >;
    VoterAdded: TypedContractEvent<
      VoterAddedEvent.InputTuple,
      VoterAddedEvent.OutputTuple,
      VoterAddedEvent.OutputObject
    >;
  };
}
